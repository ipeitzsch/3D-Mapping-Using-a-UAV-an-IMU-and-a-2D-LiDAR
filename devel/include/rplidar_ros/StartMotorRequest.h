// Generated by gencpp from file rplidar_ros/StartMotorRequest.msg
// DO NOT EDIT!


#ifndef RPLIDAR_ROS_MESSAGE_STARTMOTORREQUEST_H
#define RPLIDAR_ROS_MESSAGE_STARTMOTORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt16.h>

namespace rplidar_ros
{
template <class ContainerAllocator>
struct StartMotorRequest_
{
  typedef StartMotorRequest_<ContainerAllocator> Type;

  StartMotorRequest_()
    : pwm()  {
    }
  StartMotorRequest_(const ContainerAllocator& _alloc)
    : pwm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _pwm_type;
  _pwm_type pwm;





  typedef boost::shared_ptr< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartMotorRequest_

typedef ::rplidar_ros::StartMotorRequest_<std::allocator<void> > StartMotorRequest;

typedef boost::shared_ptr< ::rplidar_ros::StartMotorRequest > StartMotorRequestPtr;
typedef boost::shared_ptr< ::rplidar_ros::StartMotorRequest const> StartMotorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rplidar_ros::StartMotorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rplidar_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd160db0cb9e838a10809e84d876d07a";
  }

  static const char* value(const ::rplidar_ros::StartMotorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd160db0cb9e838aULL;
  static const uint64_t static_value2 = 0x10809e84d876d07aULL;
};

template<class ContainerAllocator>
struct DataType< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rplidar_ros/StartMotorRequest";
  }

  static const char* value(const ::rplidar_ros::StartMotorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt16 pwm\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16\n\
uint16 data\n\
";
  }

  static const char* value(const ::rplidar_ros::StartMotorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pwm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartMotorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rplidar_ros::StartMotorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rplidar_ros::StartMotorRequest_<ContainerAllocator>& v)
  {
    s << indent << "pwm: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.pwm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RPLIDAR_ROS_MESSAGE_STARTMOTORREQUEST_H
